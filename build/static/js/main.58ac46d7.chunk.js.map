{"version":3,"sources":["images/sasken.png","components/FileUpload.js","components/FileList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FileUpload","props","changeHandler","event","console","log","target","files","size","alert","setState","selectedFile","isFileSelected","document","getElementById","value","uploadFile","fileToUpload","url","formData","FormData","append","config","onUploadProgress","progressEvent","loaded","total","percent","Math","floor","this","uploadPercentage","axios","post","then","response","refresh","setTimeout","catch","error","data","message","state","className","type","id","accept","name","onChange","onClick","ProgressBar","striped","animated","now","label","Component","FileList","refreshFileList","get","fileArr","searchResultArr","deleteFile","window","confirm","delete","searchHandler","searchText","resArr","filter","file","FileID","includes","toLowerCase","length","map","FileName","FileSize","FileUploadedDate","key","Date","toString","split","slice","join","placeholder","renderTableData","App","src","require","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58ac46d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sasken.9508a978.png\";","\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { ProgressBar } from 'react-bootstrap';\nconst BaseUrl = 'https://serverfileupload.herokuapp.com/';\n\nclass FileUpload extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedFile: null,\n            isFileSelected: false,\n            uploadPercentage: 0\n        }\n    }\n\n\n    changeHandler = event => {\n        console.log(\"file selected\")\n        if (event.target.files[0] != null) {\n            var FileSize = event.target.files[0].size / 1024 / 1024; // in MB\n            if (FileSize > 1) {\n                alert('File size exceeds 1 MB');\n                this.setState({\n                    selectedFile: null,\n                    isFileSelected: false\n                })\n                document.getElementById(\"fileControl\").value = \"\";\n            } else {\n                console.log(\"file selected\")\n                this.setState({\n                    selectedFile: event.target.files[0],\n                    isFileSelected: true\n                })\n            }\n        } else {\n            console.log(\"file not selected\")\n            this.setState({\n                selectedFile: null,\n                isFileSelected: false\n            })\n        }\n    }\n\n\n    uploadFile = fileToUpload => {\n\n        const url = `${BaseUrl}uploadfile`;\n        const formData = new FormData();\n        formData.append('myFile', fileToUpload)\n\n        var config = {\n            onUploadProgress: function (progressEvent) {\n                const { loaded, total } = progressEvent;\n                let percent = Math.floor((loaded * 100) / total)\n                console.log(`${loaded}kb of ${total}kb | ${percent}%`);\n                console.log(this.uploadPercentage);\n                if (percent < 100) {\n                    this.setState({ uploadPercentage: percent })\n                }\n            }\n        };\n\n\n        axios.post(url, formData, config).then(response => {\n            console.log(\"Indside RESPONSE\")\n            console.log(response);\n            this.props.refresh();\n            document.getElementById(\"fileControl\").value = \"\";\n            this.setState({ selectedFile: null, isFileSelected: false, uploadPercentage: 100 }, () => {\n                setTimeout(() => {\n                    this.setState({ uploadPercentage: 0 })\n                }, 1000);\n            })\n        }).catch(error => {\n            console.log(error.response);\n            if (error.response) {\n                alert(`Error : ${error.response.data.message}`);\n            } else {\n                alert(`${error}`);\n            }\n        })\n    }\n\n\n    render() {\n        const { uploadPercentage } = this.state;\n        return (\n            <div className='fileUpload'>\n                <br></br>\n                <div>\n                    <h2>Upload Files:</h2>\n                    <br></br>\n                    <input type=\"file\" id=\"fileControl\" accept=\".txt,.jpeg,.pdf,.json,.odt,.jpeg,.png,.jpg\" name=\"file\" onChange={this.changeHandler}></input>\n                    {this.state.isFileSelected ? <button className=\"upload\" onClick={() => this.uploadFile(this.state.selectedFile)}>Upload</button> : null}\n                </div>\n                <br></br>\n                <div>\n                    {uploadPercentage > 0 && <ProgressBar striped animated now={uploadPercentage} label={`${uploadPercentage}%`} />}\n                </div>\n                <br></br>\n                <div>\n                    <label> <p>  Only upload the text, pdf, json and image files.\n                            </p> And file size should be less than 1MB.</label>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FileUpload\n","import React, { Component } from 'react';\nimport axios from 'axios';\nconst BaseUrl = 'https://serverfileupload.herokuapp.com/';\n\nclass FileList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fileArr: [],\n            searchResultArr: [],\n            refresh: false\n        }\n    }\n\n\n    //To fetch all uploaded files\n    componentDidMount() {\n        console.log(\"Did mount\")\n        this.refreshFileList();\n    }\n\n    componentWillReceiveProps() {\n        console.log(\"Will recieve prps\")\n        this.refreshFileList();\n    }\n\n    //To fetch all uploaded files\n    refreshFileList = () => {\n        axios.get(`${BaseUrl}listfiles`).then(response => {\n            console.log(\"@@@@@@@@@@@@\");\n            console.log(response.data);\n            this.setState({\n                fileArr: response.data,\n                searchResultArr: response.data\n            })\n        }).catch(error => {\n            if (error.response) {\n                alert(`Error : ${error.response.data.message}`);\n            } else {\n                alert(`${error}`)\n            }\n            console.log(error);\n        })\n    }\n\n\n\n    //To delete a uploaded file\n    deleteFile = id => {\n        if (id) {\n            if (window.confirm(`Do you want to delete the item ${id}?`)) {\n                const url = `${BaseUrl}deletefile/`;\n                axios.delete(`${url}${id}`).then(response => {\n                    console.log(response);\n                    this.refreshFileList()\n                }).catch(error => {\n                    if (error.response) {\n                        alert(`Error : ${error.response.data.message}`);\n                    } else {\n                        alert(`${error}`)\n                    }\n                    console.log(error);\n                })\n            }\n        } else {\n            alert(\"Unable to delete a file\");\n        }\n    }\n\n\n    //Search file by ID or Name\n    searchHandler = searchText => {\n        var originalArr = this.state.fileArr\n        var resArr = originalArr.filter(function (file) {\n            return (file.FileID.includes(searchText.target.value.toLowerCase()));\n            //((file.fileId.includes(searchText.target.value)) ||\n        });\n        if ((searchText.target.value) !== \"\") {\n            this.setState({\n                fileArr: resArr\n            })\n        } else {\n            console.log(\"empty search\")\n            this.setState({\n                fileArr: this.state.searchResultArr\n            })\n        }\n\n        if (resArr.length === 0) {\n            this.setState({\n                fileArr: this.state.searchResultArr\n            })\n        }\n    }\n\n\n\n    renderTableData() {\n        console.log(this.props)\n        return this.state.fileArr.map((file) => {\n            const { FileID, FileName, FileSize, FileUploadedDate } = file //destructuring\n            console.log(\"----INSIDE RENDER -----\")\n            return (\n                <tr key={FileID}>\n                    <td></td>\n                    <td>{FileID}</td>\n                    <td>{FileName}</td>\n                    <td>{((new Date(FileUploadedDate)).toString()).split(' ').slice(0, 5).join(' ')}</td>\n                    <td>{FileSize}</td>\n                    <td><button className=\"delete\" onClick={() => this.deleteFile(FileID)}>Delete</button></td>\n                </tr>\n            )\n        })\n    }\n\n\n    render(props) {\n        if (this.state.fileArr.length > 0) {\n            return (\n                <div>\n                    <br></br>\n                    <h2>Uploaded Files List:</h2>\n                    <div className=\"search\">\n                        <input type=\"text\" placeholder=\"Search file by id\" onChange={this.searchHandler}></input>\n                    </div>\n                    <div className=\"tableDiv\">\n                        <table className=\"css-serial\">\n                            <thead>\n                                <tr>\n                                    <th>Sl. No</th>\n                                    <th>File Id</th>\n                                    <th>File Name</th>\n                                    <th>Uploaded Date</th>\n                                    <th>File Size (Bytes)</th>\n                                    <th>Delete</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.renderTableData()}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <br></br>\n                    <h2>Uploaded Files List:</h2>\n                    <p>No files uploaded</p>\n                </div>\n            )\n        }\n    }\n}\n\nexport default FileList","import './App.css';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\nimport React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport class App extends Component {\n\n  refreshFileList = () => {\n    console.log(\"File uploaded succesfully\");\n    this.setState({ state: this.state });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>File Uploading App</h1>\n          <h2>Version</h2>\n          <img src={require('./images/sasken.png')} />\n        </div>\n        <h1 className='footer'>&copy; 2020 Sasken Technologies Limited</h1>\n        <hr className=\"dotted\"></hr>\n        <div className=\"fileUpload\">\n          <FileUpload refresh={this.refreshFileList}></FileUpload>\n        </div>\n        <div className=\"fileList\">\n          <FileList></FileList>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}